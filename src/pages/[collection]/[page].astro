---
import { getCollection, render } from "astro:content";
import { COLLECTION_CHOICES } from "../../content.config";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths({ paginate }) {
  let paths = [];

  for (const collection of COLLECTION_CHOICES) {
    const posts = await getCollection(collection);
    const paginatedPosts = paginate(posts, {
      params: { collection, page: 1 },
      pageSize: 5,
    });
    paths = paths.concat(paginatedPosts);
  }

  return paths;
}

const { page } = Astro.props;
const params = Astro.params;
---


<script src="../../components/live-window"></script>

<script>
  import { merge, isEqual } from "lodash";
  import type { ILiveWindowSceneConfig } from "../../components/live-window/types";

  document.documentElement.classList.add("loading");

  const defaultSettings: ILiveWindowSceneConfig = {
    useLiveWeather: true,
    useLiveTime: true,
    overrideTime: null,
    overrideWeather: null,
    clockFormat: "analog",
    clockEnabled: false,
    cloudsEnabled: false,
    lightningEnabled: false,
    percipitationEnabled: false,
    skyboxEnabled: true,
  };

  const scene = document.getElementById("main-window");

  document.addEventListener("DOMContentLoaded", handleInit);

  scene.addEventListener("ready", () => {
    document.documentElement.classList.remove("loading");
  });

  function getSettings() {
    const storedSettings = localStorage.getItem("live-window-custom-settings") || "{}";
    const settings = merge({}, defaultSettings, JSON.parse(storedSettings));

    if (settings.overrideWeather) {
      settings.overrideWeather = parseInt(settings.overrideWeather, 10);
    }

    return settings;
  }

  function handleInit() {
    const settings = getSettings();
    scene.updateConfig(settings);
  }
</script>


<Layout>
  <div class="w-full h-screen">
    <livewindow-scene id="main-window" group="main-window" class="w-full h-screen" />
  </div>
  <h1>{params.collection} - Page {page.currentPage} / {page.lastPage}</h1>
  <ul>
    {
      page.data.map((post) => (
        <li>
          <a href={`/${post.collection}/${post.id}/`}>
            {post.data.title || post.id}
          </a>
        </li>
      ))
    }
  </ul>

  {page.url.first ? <a href={page.url.first}>First</a> : null}
  {page.url.prev ? <a href={page.url.prev}>Previous</a> : null}
  {page.url.next ? <a href={page.url.next}>Next</a> : null}
  {page.url.last ? <a href={page.url.last}>Last</a> : null}
</Layout>
