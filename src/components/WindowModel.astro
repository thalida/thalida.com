---
import "../styles/global.css";
---

<div id="window-container"></div>

<script>
  import { fade } from "astro:transitions";
  import * as Matter from "matter-js";

  init();

  function HSLToRGB(h, s, l) {
    s /= 100;
    l /= 100;
    const k = (n) => (n + h / 30) % 12;
    const a = s * Math.min(l, 1 - l);
    const f = (n) =>
      l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
    return [255 * f(0), 255 * f(8), 255 * f(4)];
  }

  function calculateClockPosition() {
    const currentTime = new Date();

    const offset = 90; // Offset to align with the top of the clock

    // Calculate the angles for hour, minute, and second hands
    const hours = currentTime.getHours() % 12;
    const minutes = currentTime.getMinutes();
    const seconds = currentTime.getSeconds();

    const degreesPerHour = 360 / 12; // 12 hours on a clock
    const degreesPerMinute = 360 / 60; // 60 minutes on a clock
    const degreesPerSecond = 360 / 60; // 60 seconds on a clock

    const hourDegrees =
      hours * degreesPerHour + (minutes / 60) * degreesPerHour;
    const minuteDegrees =
      minutes * degreesPerMinute + (seconds / 60) * degreesPerMinute;
    const secondDegrees = seconds * degreesPerSecond;

    // Convert degrees to radians
    const hourRadians = (Math.PI * (hourDegrees + offset)) / 180;
    const minuteRadians = (Math.PI * (minuteDegrees + offset)) / 180;
    const secondRadians = (Math.PI * (secondDegrees + offset)) / 180;

    return {
      hour: hourRadians,
      minute: minuteRadians,
      second: secondRadians,
    };
  }

  function init() {
    // module aliases
    var Engine = Matter.Engine,
      Render = Matter.Render,
      Runner = Matter.Runner,
      Bodies = Matter.Bodies,
      Body = Matter.Body,
      Composite = Matter.Composite,
      Composites = Matter.Composites,
      Events = Matter.Events,
      Common = Matter.Common;

    // create an engine
    var engine = Engine.create();
    var world = engine.world;

    var container = document.getElementById("window-container");

    if (!container) {
      console.error("Container element not found");
      return;
    }

    // create a renderer
    var render = Render.create({
      element: container,
      engine: engine,
      options: {
        width: 800,
        height: 600,
        wireframes: false,
      },
    });

    Render.run(render);

    // create runner
    var runner = Runner.create();
    Runner.run(runner, engine);

    // Create walls
    Composite.add(world, [
      // top wall
      Bodies.rectangle(400, 0, 800, 20, {
        isStatic: true,
        render: { fillStyle: "red" },
      }),
      // bottom wall
      Bodies.rectangle(400, 600, 800, 20, {
        isStatic: true,
        render: { fillStyle: "yellow" },
      }),
      // right wall
      Bodies.rectangle(800, 300, 20, 600, {
        isStatic: true,
        render: { fillStyle: "blue" },
      }),
      // left wall
      Bodies.rectangle(0, 300, 20, 600, {
        isStatic: true,
        render: { fillStyle: "green" },
      }),
    ]);

    // Create the clock hands
    var hourBody = Bodies.rectangle(400 - 100, 300, 200, 20, {
      isStatic: true,
      render: { fillStyle: "pink" },
      restitution: 1,
    });
    Body.setCentre(hourBody, { x: 100, y: 0 }, true);

    var minuteBody = Bodies.rectangle(400 - 125, 300, 250, 20, {
      isStatic: true,
      render: { fillStyle: "purple" },
      restitution: 1,
    });
    Body.setCentre(minuteBody, { x: 125, y: 0 }, true);

    // Set the position of the hour and minute hands based on the current time
    const clockPosition = calculateClockPosition();
    Body.setAngle(hourBody, clockPosition.hour);
    Body.setAngle(minuteBody, clockPosition.minute);

    Composite.add(world, [hourBody, minuteBody]);
    Render.run(render);

    var stack = Composites.stack(0, 0, 100, 6, 10, 10, function (x, y) {
      const radius = Common.random(2, 4);
      const lightness = Common.random(50, 25);
      const rgbColor = HSLToRGB(200, 50, lightness);

      const body = Bodies.circle(x, y, radius, {
        friction: 0.00001,
        restitution: 0.5,
        density: 0.001,
        render: {
          fillStyle: `rgb(${rgbColor[0]}, ${rgbColor[1]}, ${rgbColor[2]})`,
        },
      });

      return body;
    });

    Composite.add(world, [stack]);
    Render.run(render);

    Events.on(engine, "beforeUpdate", function (event) {
      // Update the clock hands every second
      if (event.timestamp % 1000 < 50) {
        const clockPosition = calculateClockPosition();
        Body.setAngle(hourBody, clockPosition.hour);
        Body.setAngle(minuteBody, clockPosition.minute);
      }
    });
  }
</script>
