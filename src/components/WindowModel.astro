---
import "../styles/global.css";
---

<div id="window-container"></div>

<script>
  import * as Matter from "matter-js";

  init();

  function init() {
    // module aliases
    var Engine = Matter.Engine,
      Render = Matter.Render,
      Runner = Matter.Runner,
      Bodies = Matter.Bodies,
      Body = Matter.Body,
      Composite = Matter.Composite,
      Composites = Matter.Composites,
      Constraint = Matter.Constraint;

    // create an engine
    var engine = Engine.create();
    var world = engine.world;

    var container = document.getElementById("window-container");

    if (!container) {
      console.error("Container element not found");
      return;
    }

    // create a renderer
    var render = Render.create({
      element: container,
      engine: engine,
      options: {
        width: 800,
        height: 600,
        wireframes: false,
      },
    });

    Render.run(render);

    // create runner
    var runner = Runner.create();
    Runner.run(runner, engine);

    var group = Body.nextGroup(true);

    var ropeA = Composites.stack(100, 50, 2, 1, 10, 10, function (x, y) {
      return Bodies.rectangle(x, y, 50, 20, {
        collisionFilter: { group: group },
      });
    });

    Composites.chain(ropeA, 0.5, 0, -0.5, 0, {
      stiffness: 0.8,
      length: 0,
      render: { type: "line" },
    });
    Composite.add(
      ropeA,
      Constraint.create({
        bodyB: ropeA.bodies[0],
        pointB: { x: -25, y: 0 },
        pointA: {
          x: ropeA.bodies[0].position.x,
          y: ropeA.bodies[0].position.y,
        },
        stiffness: 0.5,
      })
    );

    Composite.add(world, [ropeA]);

    Composite.add(world, [
      // walls
      Bodies.rectangle(400, 0, 800, 20, {
        isStatic: true,
        render: { fillStyle: "red" },
      }), // top wall
      Bodies.rectangle(400, 600, 800, 20, {
        isStatic: true,
        render: { fillStyle: "red" },
      }), // bottom wall
      Bodies.rectangle(800, 300, 20, 600, {
        isStatic: true,
        render: { fillStyle: "red" },
      }), // right wall
      Bodies.rectangle(0, 300, 20, 600, {
        isStatic: true,
        render: { fillStyle: "red" },
      }), // left wall
    ]);

    Composite.add(world, [
      Bodies.rectangle(400, 300, 400, 20, {
        isStatic: true,
        angle: Math.PI * 0.06,
        render: { fillStyle: "#060a19" },
      }),
    ]);

    Composite.add(world, [
      Bodies.rectangle(400, 300, 200, 20, {
        isStatic: true,
        angle: Math.PI * 0.06,
        render: { fillStyle: "#060a19" },
      }),
    ]);

    // Composite.add(world, [
    //   Bodies.rectangle(300, 520, 700, 20, {
    //     isStatic: true,
    //     angle: Math.PI * 0.06,
    //     render: { fillStyle: "#060a19" },
    //   }),
    //   // Bodies.rectangle(300, 430, 40, 40, { friction: 0 }),
    // ]);

    // add all of the bodies to the world
    // Composite.add(engine.world, [boxA, boxB, ground]);

    // run the renderer
    Render.run(render);
  }
</script>
